/**
 * This file contains the class definition for a Activity and Activity subclasses
 * @author moore
 */

/**
 * Class definition of `Activity`
 * @param {Object} watched an object in format {collection: [name of collection], dataId: [_id from collection]} which the user was watching
 * @param {Object} trigger an object in format {collection: [name of collection], dataId: [_id from collection]} 
 *                  which triggered the Activity
 * @return void
 */
Activity = function Activity(activity) { 
  var user = Meteor.userId();
  if (activity) { 
    this.activity = activity;
    
     // save this off so it's not affected by the incoming ack-ing.
    this.ackClass = (_.find(activity.users, function(u) { return u.userId === user }).ack ? '' : 'activity-un-acknowledged');
    this.linkClass = ''; // allow changing the class of the anchor tag around the link -- see Axle activity for example
    this.getUserName = function(authorId) { 
      if (authorId === Meteor.userId()) { return "You"; }
      else { return getUserName(authorId); } // scopes out to getUserName defined in users-collection.js
    }
  } // this is the dumbest fuckin' thing
}
/**
 * Comment-specific activity
 * @type {Activity}
 */
CommentActivity = function CommentActivity(activity) { 
  _.extend(this, new Activity(activity)); // extend  Activity.
  var squeak = Squeaks.findOne({_id: activity.watched._id});
  if (!squeak) { return false; } // deal with if the subscription doesn't exist

  var comment = _.findWhere(squeak.comments, {_id: activity.action._id});

  this.meatClass = "well";
  this.performer = this.getUserName(comment.author);
  this.action = " commented on ";
  this.linkPath = 'squeakPage';
  this.linkId = squeak._id; 
  this.linkText = squeak.title;
  this.template = "_comment";
  this.templateData = comment;
}
/**
 * Activity generated when a watched Squeak is deleted
 * @type {Activity}
 */
WatchedSqueakDeletedActivity = function WatchedSqueakDeletedActivity(activity) { 
  _.extend(this, new Activity(activity)); // extend  Activity.

  this.meatClass = "deleted-squeak";
  this.action = "deleted watched squeak '" + this.activity.action.title + "'";
  this.performer = this.getUserName(activity.action.user);
}
/**
 * Activity generated when a Squeak is tagged to a watched Axle
 * @type {Activity}
 */
SqueakTaggedToAxleActivity = function SqueakTaggedToAxleActivity(activity) { 
  _.extend(this, new Activity(activity)); // extend Activity
  var axle = Axles.findOne({_id: this.activity.watched._id});

  if (axle) { 
    this.meatClass = "squeak-content";
    this.action = "tagged the following squeak to watched axle ";
    this.performer = this.getUserName(activity.action.user);
    this.linkId = axle.id;
    this.linkPath = 'squeakList'; // have a handler for this in the activity page
    this.linkClass = 'axle-link';
    this.linkText = axle.name;
    this.template = "_squeak";
    this.templateData = Squeaks.findOne({_id: this.activity.action._id});
  }
}
/**
 * Activity generated when a Squeak is removed from a watched Axle
 * @type {Activity}
 */
SqueakRemovedFromAxleActivity = function SqueakRemovedFromAxleActivity(activity) { 
  _.extend(this, new Activity(activity)); // extend Activity
  var axle = Axles.findOne({_id: this.activity.watched._id});
  if (axle) { // may need to wait on a subscription here.
    this.meatClass = "squeak-content";
    this.action = "removed the following squeak from watched axle ";
    this.performer = this.getUserName(activity.action.user);
    this.linkId = axle.id;
    this.linkPath = 'squeakList';
    this.linkClass = 'axle-link';
    this.linkText = axle.name;
    this.template = "_squeak";
    this.templateData = Squeaks.findOne({_id: this.activity.action._id});
  }
}
/**
 * Activity generated when a Squeak is deleted from a watched Axle
 * @type {Activity}
 */
SqueakDeletedFromAxleActivity = function SqueakDeletedFromAxleActivity(activity) { 
  _.extend(this, new Activity(activity)); // extend Activity
  var axle = Axles.findOne({_id: this.activity.watched._id});
  if (axle) { // may need to wait on a subscription here.
    this.meatClass = "deleted-squeak";
    this.action = "deleted squeak '" + this.activity.action.title + "' from ";
    this.performer = this.getUserName(activity.action.user);
    this.linkPath = 'squeakList';
    this.linkClass = 'axle-link';
    this.linkText = axle.name;
    this.linkId = axle._id;
  }
}
/**
 * Activity generated by editing a Squeak
 * @type {Activity} 
 */
SqueakEditedActivity = function SqueakEditedActivity(activity) { 
  _.extend(this, new Activity(activity)); // extend Activity
  var edit = Edits.findOne({_id: this.activity.action._id});
  var squeakTitle;
  if (edit) { 
    squeakTitle = Squeaks.findOne({_id: this.activity.watched._id}).title;
    this.action = "changed the " + edit.reference.field + " for ";
    this.linkText = squeakTitle;
    this.linkId = this.activity.watched._id;
    this.linkPath = "squeakPage";
    this.performer = this.getUserName(edit.user);
    this.template = '_edit';
    this.templateData = edit;
  }
}
/**
 * Activity generated by proposing a new workflow motion
 * @type {Activity}
 */
WorkflowMotionInitiatedActivity = function WorkflowMotionInitiatedActivity(activity) { 
  _.extend(this, new Activity(activity)); // extend Activity
  var squeak = Squeaks.findOne({_id: activity.watched._id});
  var motion;
  if (squeak) { 
    motion = _.findWhere(squeak.motions, {_id: activity.action._id});
    this.action = "proposed change of workflow state of ";
    this.linkText = squeak.title;
    this.linkId = squeak._id;
    this.linkPath = "squeakPage";
    this.postLinkText = " from " + motion.previousState + " to " + motion.proposedState;
    this.performer = this.getUserName(motion.user);
    this.template = "_squeakMotion";
    this.templateData = motion;
  }
}
/**
 * Activity generated by resolving workflow motion
 * @type {Activity}
 */
WorkflowMotionResolvedActivity = function WorkflowMotionResolvedActivity(activity) { 
  _.extend(this, new Activity(activity)); // extend Activity
  var squeak = Squeaks.findOne({_id: activity.watched._id});
  var motion;
  if (squeak) { 
    motion = _.findWhere(squeak.motions, {_id: activity.action._id});
    this.action = "'s proposal to change ";
    this.performer = getUserName(motion.user);
    this.linkText = squeak.title;
    this.linkId = squeak._id;
    this.linkPath = "squeakPage";
    this.postLinkText = " from " + motion.previousState + " to " + motion.proposedState + " was " + motion.state.toLowerCase();
    this.template = "_squeakMotion"; // debug -- fix
    this.templateData = motion;
  }
}
/**
 * Activity generated by commenting on a workflow motion
 * @type {Activity}
 * @TODO FIXME better logic for the getUserName() part.
 */
WorkflowMotionCommentActivity = function WorkflowMotionCommentActivity(activity) { 
  _.extend(this, new Activity(activity)); // extend Activity
  var squeak = Squeaks.findOne({_id: activity.watched._id});
  var motion;
  if (squeak) { 
    motion = _.findWhere(squeak.motions, {_id: activity.action.motionId});
    comment = _.findWhere(motion.comments, {_id: activity.action._id});
    this.action = "commented on " + getUserName(motion.user) + "'s proposal to change "; // cheap -- we'll need to fix this.
    this.linkText = squeak.title;
    this.linkPath = "squeakPage";
    this.linkId = squeak._id;
    this.performer = this.getUserName(comment.author);
    this.postLinkText = " from " + motion.previousState + " to " + motion.proposedState;
    this.template = '_comment';
    this.templateData = comment;
  }
}
/**
 * Activity generated when a new user joins Squeaky Wheel
 */
UserJoinedActivity = function UserJoinedActivity(activity) { 
  _.extend(this, new Activity(activity)) // extend Activity
  this.action = "joined Squeaky Wheel.  Welcome!";
  this.performer = "You";
}
/**
 * Activities used solely in the tutorial examples
 * @type {Activity}
 */
TutorialExampleActivity = function TutorialExampleActivity(activity) { 
  _.extend(this, new Activity(activity)) // extend Activity
  this.performer = this.getUserName(this.activity.action.user);
  this.action = "received an example notification."
  this.template = (this.activity.action.ack ? 'tutorial-activity-example-ack' : 'tutorial-activity-example-unack');
}
/**
 * return a new Activity given the "Activity" "class" stored in Mongo.
 * @param  {Object} Activity of type found in Meteor.users....Activities
 * @return {Activity} of type defined above
 */
createNewActivity = function createNewActivity(activity) { 
  if (activity.type === 'comment') { return new CommentActivity(activity); }
  if (activity.type === 'watchedSqueakDeleted') { return new WatchedSqueakDeletedActivity(activity); }
  if (activity.type === 'squeakTaggedToAxle') { return new SqueakTaggedToAxleActivity(activity); }
  if (activity.type === 'squeakRemovedFromAxle') { return new SqueakRemovedFromAxleActivity(activity); }
  if (activity.type === 'squeakDeletedFromAxle') { return new SqueakDeletedFromAxleActivity(activity); }
  if (activity.type === 'squeakEdited') { return new SqueakEditedActivity(activity); }
  if (activity.type === 'workflowMotionInitiated') { return new WorkflowMotionInitiatedActivity(activity); }
  if (activity.type === 'workflowMotionResolved') { return new WorkflowMotionResolvedActivity(activity); }
  if (activity.type === 'workflowMotionComment') { return new WorkflowMotionCommentActivity(activity); }
  if (activity.type === 'userJoined') { return new UserJoinedActivity(activity); }
  if (activity.type === 'tutorialExample') { return new TutorialExampleActivity(activity); }
  
  console.log(activity); throw new Meteor.Error("Unknown activity type " + activity.type);
}
